<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>FlowPipe: Graph Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">FlowPipe
   </div>
   <div id="projectbrief">Flow based programming framework in Python.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('df/d88/classflowpipe_1_1graph_1_1Graph.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="../../d1/d5a/classflowpipe_1_1graph_1_1Graph-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Graph Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A graph of Nodes.  
 <a href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#details">More...</a></p>
<div class="dynheader">
Inheritance diagram for Graph:</div>
<div class="dyncontent">
<div class="center"><img src="../../d9/df5/classflowpipe_1_1graph_1_1Graph__inherit__graph.png" border="0" usemap="#Graph_inherit__map" alt="Inheritance graph"/></div>
<map name="Graph_inherit__map" id="Graph_inherit__map">
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for Graph:</div>
<div class="dyncontent">
<div class="center"><img src="../../d1/d95/classflowpipe_1_1graph_1_1Graph__coll__graph.png" border="0" usemap="#Graph_coll__map" alt="Collaboration graph"/></div>
<map name="Graph_coll__map" id="Graph_coll__map">
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aeb308730343fd3443c1f0df64ffc61f1"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#aeb308730343fd3443c1f0df64ffc61f1">__init__</a> (self, <a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#ab74e6bf80237ddc4109968cedc58c151">name</a>=None, <a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a6da5270e48c8b5c2f0dbaa008af4df76">nodes</a>=None)</td></tr>
<tr class="memdesc:aeb308730343fd3443c1f0df64ffc61f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the list of Nodes, inputs and outpus.  <a href="#aeb308730343fd3443c1f0df64ffc61f1">More...</a><br /></td></tr>
<tr class="separator:aeb308730343fd3443c1f0df64ffc61f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04fb49fe8164306b5222027c7dda3f22"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a04fb49fe8164306b5222027c7dda3f22">__unicode__</a> (self)</td></tr>
<tr class="memdesc:a04fb49fe8164306b5222027c7dda3f22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Display the <a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml" title="A graph of Nodes. ">Graph</a>.  <a href="#a04fb49fe8164306b5222027c7dda3f22">More...</a><br /></td></tr>
<tr class="separator:a04fb49fe8164306b5222027c7dda3f22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23e8041ce1015febe4fdace3225714f9"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a23e8041ce1015febe4fdace3225714f9">__str__</a> (self)</td></tr>
<tr class="memdesc:a23e8041ce1015febe4fdace3225714f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Show all input and output Plugs.  <a href="#a23e8041ce1015febe4fdace3225714f9">More...</a><br /></td></tr>
<tr class="separator:a23e8041ce1015febe4fdace3225714f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c010f80f5ebc27fd01780e480682686"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a9c010f80f5ebc27fd01780e480682686">__getitem__</a> (self, key)</td></tr>
<tr class="memdesc:a9c010f80f5ebc27fd01780e480682686"><td class="mdescLeft">&#160;</td><td class="mdescRight">Grant access to Nodes via their name.  <a href="#a9c010f80f5ebc27fd01780e480682686">More...</a><br /></td></tr>
<tr class="separator:a9c010f80f5ebc27fd01780e480682686"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac655dc397674d3cb4d4a0407999e42a7"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#ac655dc397674d3cb4d4a0407999e42a7">all_nodes</a> (self)</td></tr>
<tr class="memdesc:ac655dc397674d3cb4d4a0407999e42a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Expand the graph with all its subgraphs into a flat list of nodes.  <a href="#ac655dc397674d3cb4d4a0407999e42a7">More...</a><br /></td></tr>
<tr class="separator:ac655dc397674d3cb4d4a0407999e42a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a516d7c02f8327315e4ff0b86a66c5f50"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a516d7c02f8327315e4ff0b86a66c5f50">subgraphs</a> (self)</td></tr>
<tr class="memdesc:a516d7c02f8327315e4ff0b86a66c5f50"><td class="mdescLeft">&#160;</td><td class="mdescRight">All other graphs that the nodes of this graph are connected to.  <a href="#a516d7c02f8327315e4ff0b86a66c5f50">More...</a><br /></td></tr>
<tr class="separator:a516d7c02f8327315e4ff0b86a66c5f50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46079b489189ee96db4d2996138e2fb4"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a46079b489189ee96db4d2996138e2fb4">evaluation_matrix</a> (self)</td></tr>
<tr class="memdesc:a46079b489189ee96db4d2996138e2fb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sort nodes into a 2D matrix based on their dependency.  <a href="#a46079b489189ee96db4d2996138e2fb4">More...</a><br /></td></tr>
<tr class="separator:a46079b489189ee96db4d2996138e2fb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73ed7289d91d98133806fbedb1a29a66"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a73ed7289d91d98133806fbedb1a29a66">evaluation_sequence</a> (self)</td></tr>
<tr class="memdesc:a73ed7289d91d98133806fbedb1a29a66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sort Nodes into a sequential, flat execution order.  <a href="#a73ed7289d91d98133806fbedb1a29a66">More...</a><br /></td></tr>
<tr class="separator:a73ed7289d91d98133806fbedb1a29a66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd311558aae8bf4d61a05f8074692bf2"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#afd311558aae8bf4d61a05f8074692bf2">add_node</a> (self, node)</td></tr>
<tr class="memdesc:afd311558aae8bf4d61a05f8074692bf2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add given Node to the <a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml" title="A graph of Nodes. ">Graph</a>.  <a href="#afd311558aae8bf4d61a05f8074692bf2">More...</a><br /></td></tr>
<tr class="separator:afd311558aae8bf4d61a05f8074692bf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa515aec53fd1f2aa8e89cd94a7216143"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#aa515aec53fd1f2aa8e89cd94a7216143">add_plug</a> (self, plug, <a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#ab74e6bf80237ddc4109968cedc58c151">name</a>=None)</td></tr>
<tr class="memdesc:aa515aec53fd1f2aa8e89cd94a7216143"><td class="mdescLeft">&#160;</td><td class="mdescRight">Promote the given plug this graph.  <a href="#aa515aec53fd1f2aa8e89cd94a7216143">More...</a><br /></td></tr>
<tr class="separator:aa515aec53fd1f2aa8e89cd94a7216143"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4635f11d2bd466727ec496a01442aae4"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a4635f11d2bd466727ec496a01442aae4">accepts_connection</a> (self, output_plug, input_plug)</td></tr>
<tr class="memdesc:a4635f11d2bd466727ec496a01442aae4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Raise exception if new connection would violate integrity of graph.  <a href="#a4635f11d2bd466727ec496a01442aae4">More...</a><br /></td></tr>
<tr class="separator:a4635f11d2bd466727ec496a01442aae4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab705226f7ce49486de6eba408267d261"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#ab705226f7ce49486de6eba408267d261">evaluate</a> (self, mode=&quot;linear&quot;, skip_clean=False, submission_delay=0.1, max_workers=None)</td></tr>
<tr class="memdesc:ab705226f7ce49486de6eba408267d261"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate all Nodes in the graph.  <a href="#ab705226f7ce49486de6eba408267d261">More...</a><br /></td></tr>
<tr class="separator:ab705226f7ce49486de6eba408267d261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade569b6a8679a861eee819f8b4b66705"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#ade569b6a8679a861eee819f8b4b66705">to_pickle</a> (self)</td></tr>
<tr class="memdesc:ade569b6a8679a861eee819f8b4b66705"><td class="mdescLeft">&#160;</td><td class="mdescRight">Serialize the graph into a pickle.  <a href="#ade569b6a8679a861eee819f8b4b66705">More...</a><br /></td></tr>
<tr class="separator:ade569b6a8679a861eee819f8b4b66705"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9652a44cd597a4f83a41ab303f3ec4e"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#ab9652a44cd597a4f83a41ab303f3ec4e">to_json</a> (self)</td></tr>
<tr class="memdesc:ab9652a44cd597a4f83a41ab303f3ec4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Serialize the graph into a json.  <a href="#ab9652a44cd597a4f83a41ab303f3ec4e">More...</a><br /></td></tr>
<tr class="separator:ab9652a44cd597a4f83a41ab303f3ec4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad2fd8b7bbd35cf90e442b27a20e78a2"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#aad2fd8b7bbd35cf90e442b27a20e78a2">serialize</a> (self)</td></tr>
<tr class="memdesc:aad2fd8b7bbd35cf90e442b27a20e78a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Serialize the graph in its grid form.  <a href="#aad2fd8b7bbd35cf90e442b27a20e78a2">More...</a><br /></td></tr>
<tr class="separator:aad2fd8b7bbd35cf90e442b27a20e78a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ca929624c0159704e01e879e1d620ba"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a1ca929624c0159704e01e879e1d620ba">node_repr</a> (self)</td></tr>
<tr class="memdesc:a1ca929624c0159704e01e879e1d620ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Format to visualize the <a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml" title="A graph of Nodes. ">Graph</a>.  <a href="#a1ca929624c0159704e01e879e1d620ba">More...</a><br /></td></tr>
<tr class="separator:a1ca929624c0159704e01e879e1d620ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28b6ada072c0782e74259ede825bf15c"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a28b6ada072c0782e74259ede825bf15c">list_repr</a> (self)</td></tr>
<tr class="memdesc:a28b6ada072c0782e74259ede825bf15c"><td class="mdescLeft">&#160;</td><td class="mdescRight">List representation of the graph showing Nodes and connections.  <a href="#a28b6ada072c0782e74259ede825bf15c">More...</a><br /></td></tr>
<tr class="separator:a28b6ada072c0782e74259ede825bf15c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a3ef3f528f3c6d2608a2cf2c414c145b1"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a3ef3f528f3c6d2608a2cf2c414c145b1">from_pickle</a> (data)</td></tr>
<tr class="memdesc:a3ef3f528f3c6d2608a2cf2c414c145b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">De-serialize from the given pickle data.  <a href="#a3ef3f528f3c6d2608a2cf2c414c145b1">More...</a><br /></td></tr>
<tr class="separator:a3ef3f528f3c6d2608a2cf2c414c145b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65ed1d5a347be31615acc08d0646ca47"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a65ed1d5a347be31615acc08d0646ca47">from_json</a> (data)</td></tr>
<tr class="memdesc:a65ed1d5a347be31615acc08d0646ca47"><td class="mdescLeft">&#160;</td><td class="mdescRight">De-serialize from the given json data.  <a href="#a65ed1d5a347be31615acc08d0646ca47">More...</a><br /></td></tr>
<tr class="separator:a65ed1d5a347be31615acc08d0646ca47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc55513b8f622820fc330d57fdb67d57"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#acc55513b8f622820fc330d57fdb67d57">deserialize</a> (data)</td></tr>
<tr class="memdesc:acc55513b8f622820fc330d57fdb67d57"><td class="mdescLeft">&#160;</td><td class="mdescRight">De-serialize from the given json data.  <a href="#acc55513b8f622820fc330d57fdb67d57">More...</a><br /></td></tr>
<tr class="separator:acc55513b8f622820fc330d57fdb67d57"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:ab74e6bf80237ddc4109968cedc58c151"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#ab74e6bf80237ddc4109968cedc58c151">name</a></td></tr>
<tr class="separator:ab74e6bf80237ddc4109968cedc58c151"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6da5270e48c8b5c2f0dbaa008af4df76"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a6da5270e48c8b5c2f0dbaa008af4df76">nodes</a></td></tr>
<tr class="separator:a6da5270e48c8b5c2f0dbaa008af4df76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afde3b66b6b41bd008469f366fa756e54"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#afde3b66b6b41bd008469f366fa756e54">inputs</a></td></tr>
<tr class="separator:afde3b66b6b41bd008469f366fa756e54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8d743b78404b120589eca8c77c1c2a9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#af8d743b78404b120589eca8c77c1c2a9">outputs</a></td></tr>
<tr class="separator:af8d743b78404b120589eca8c77c1c2a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a1b284c847cc5230d5700ceb192d1a8cd"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a1b284c847cc5230d5700ceb192d1a8cd">_evaluate_linear</a> (self, nodes_to_evaluate)</td></tr>
<tr class="memdesc:a1b284c847cc5230d5700ceb192d1a8cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all nodes in a single thread (the current one).  <a href="#a1b284c847cc5230d5700ceb192d1a8cd">More...</a><br /></td></tr>
<tr class="separator:a1b284c847cc5230d5700ceb192d1a8cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77a082c05770c35af6862146372ebe3b"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a77a082c05770c35af6862146372ebe3b">_evaluate_threaded</a> (self, nodes_to_evaluate, max_workers=None)</td></tr>
<tr class="memdesc:a77a082c05770c35af6862146372ebe3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluate each node in a new thread.  <a href="#a77a082c05770c35af6862146372ebe3b">More...</a><br /></td></tr>
<tr class="separator:a77a082c05770c35af6862146372ebe3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaf5e44508078f99b112d43ec33442f8"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#afaf5e44508078f99b112d43ec33442f8">_evaluate_multiprocessed</a> (self, nodes_to_evaluate, submission_delay)</td></tr>
<tr class="memdesc:afaf5e44508078f99b112d43ec33442f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to the threaded evaluation but with multiprocessing.  <a href="#afaf5e44508078f99b112d43ec33442f8">More...</a><br /></td></tr>
<tr class="separator:afaf5e44508078f99b112d43ec33442f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7bd6299e96593297a592d3045e337db"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#ac7bd6299e96593297a592d3045e337db">_serialize</a> (self, with_subgraphs=True)</td></tr>
<tr class="memdesc:ac7bd6299e96593297a592d3045e337db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Serialize the graph in its grid form.  <a href="#ac7bd6299e96593297a592d3045e337db">More...</a><br /></td></tr>
<tr class="separator:ac7bd6299e96593297a592d3045e337db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6be30cce23167cece44175c826c70832"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml#a6be30cce23167cece44175c826c70832">_sort_node</a> (self, node, parent, level)</td></tr>
<tr class="memdesc:a6be30cce23167cece44175c826c70832"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sort the node into the correct level.  <a href="#a6be30cce23167cece44175c826c70832">More...</a><br /></td></tr>
<tr class="separator:a6be30cce23167cece44175c826c70832"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A graph of Nodes. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="aeb308730343fd3443c1f0df64ffc61f1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def __init__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em> = <code>None</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>nodes</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the list of Nodes, inputs and outpus. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a04fb49fe8164306b5222027c7dda3f22"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def __unicode__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Display the <a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml" title="A graph of Nodes. ">Graph</a>. </p>

</div>
</div>
<a class="anchor" id="a23e8041ce1015febe4fdace3225714f9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def __str__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Show all input and output Plugs. </p>

</div>
</div>
<a class="anchor" id="a9c010f80f5ebc27fd01780e480682686"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def __getitem__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Grant access to Nodes via their name. </p>

</div>
</div>
<a class="anchor" id="ac655dc397674d3cb4d4a0407999e42a7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def all_nodes </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Expand the graph with all its subgraphs into a flat list of nodes. </p>
<p>Please note that in this expanded list, the node names are no longer guaranteed to be unique!</p>
<p>Returns: (list of INode): All nodes, including the nodes from subgraphs </p>

</div>
</div>
<a class="anchor" id="a516d7c02f8327315e4ff0b86a66c5f50"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def subgraphs </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>All other graphs that the nodes of this graph are connected to. </p>
<p>Returns: A dict in the form of {graph.name: graph} </p>

</div>
</div>
<a class="anchor" id="a46079b489189ee96db4d2996138e2fb4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def evaluation_matrix </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sort nodes into a 2D matrix based on their dependency. </p>
<p>Rows affect each other and have to be evaluated in sequence. The Nodes on each row however can be evaluated in parallel as they are independent of each other. The amount of Nodes in each row can vary.</p>
<p>Returns: (list of list of INode): Each sub list represents a row. </p>

</div>
</div>
<a class="anchor" id="a73ed7289d91d98133806fbedb1a29a66"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def evaluation_sequence </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sort Nodes into a sequential, flat execution order. </p>
<p>Returns: (list of INode): A one dimensional representation of the evaluation matrix. </p>

</div>
</div>
<a class="anchor" id="afd311558aae8bf4d61a05f8074692bf2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def add_node </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add given Node to the <a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml" title="A graph of Nodes. ">Graph</a>. </p>
<p>Nodes on a <a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml" title="A graph of Nodes. ">Graph</a> have to have unique names. </p>

</div>
</div>
<a class="anchor" id="aa515aec53fd1f2aa8e89cd94a7216143"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def add_plug </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>plug</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Promote the given plug this graph. </p>
<p>Args: plug (<a class="el" href="../../d3/dd5/classflowpipe_1_1plug_1_1IPlug.xhtml" title="The interface for the plugs. ">flowpipe.plug.IPlug</a>): The plug to promote to this graph name (str): Optionally use the given name instead of the name of the given plug </p>

</div>
</div>
<a class="anchor" id="a4635f11d2bd466727ec496a01442aae4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def accepts_connection </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>output_plug</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>input_plug</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Raise exception if new connection would violate integrity of graph. </p>
<p>Args: output_plug (<a class="el" href="../../d5/df3/classflowpipe_1_1plug_1_1OutputPlug.xhtml" title="Provides data to an InputPlug. ">flowpipe.plug.OutputPlug</a>): The output plug input_plug (<a class="el" href="../../de/dee/classflowpipe_1_1plug_1_1InputPlug.xhtml" title="Receives data from an OutputPlug. ">flowpipe.plug.InputPlug</a>): The input plug Raises: CycleError and ValueError Returns: True if the connection is accepted </p>

</div>
</div>
<a class="anchor" id="ab705226f7ce49486de6eba408267d261"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def evaluate </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>mode</em> = <code>&quot;linear&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>skip_clean</em> = <code>False</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>submission_delay</em> = <code>0.1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>max_workers</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluate all Nodes in the graph. </p>
<p>Sorts the nodes in the graph into a resolution order and evaluates the nodes. Evaluation can be parallelized by utilizing the dependencies between the nodes - see the "mode" keyword for the options.</p>
<p>Note that no checks are in place whether the node execution is actually thread-safe or fit for multiprocessing. It is assumed to be given if the respective mode is selected.</p>
<p>Some keyword arguments do not affect all evaluation modes.</p>
<p>Args: mode (str): The evaluation mode. Possible modes are</p><ul>
<li>linear : Iterates over all nodes in a single thread</li>
<li>threading : Evaluates each node in a new thread</li>
<li>multiprocessing : Evaluates each node in a new process skip_clean (bool): Whether to skip nodes that are 'clean' (as tracked by the 'is_dirty' attribute on the node), i.e. whose inputs have not changed since their output was computed submission_delay (float): The delay in seconds between loops issuing new threads/processes if nodes are ready to process. max_workers (int): The maximum number of parallel threads to spawn. None defaults to your pythons ThreadPoolExecutor default. </li>
</ul>

</div>
</div>
<a class="anchor" id="a1b284c847cc5230d5700ceb192d1a8cd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">def _evaluate_linear </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>nodes_to_evaluate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Iterate over all nodes in a single thread (the current one). </p>

</div>
</div>
<a class="anchor" id="a77a082c05770c35af6862146372ebe3b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">def _evaluate_threaded </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>nodes_to_evaluate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>max_workers</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Evaluate each node in a new thread. </p>

</div>
</div>
<a class="anchor" id="afaf5e44508078f99b112d43ec33442f8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">def _evaluate_multiprocessed </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>nodes_to_evaluate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>submission_delay</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Similar to the threaded evaluation but with multiprocessing. </p>
<p>Nodes communicate via a manager and are evaluated in a dedicated function. The original node objects are updated with the results from the corresponding processes to reflect the evaluation. </p>

</div>
</div>
<a class="anchor" id="ade569b6a8679a861eee819f8b4b66705"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def to_pickle </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Serialize the graph into a pickle. </p>

</div>
</div>
<a class="anchor" id="ab9652a44cd597a4f83a41ab303f3ec4e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def to_json </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Serialize the graph into a json. </p>

</div>
</div>
<a class="anchor" id="aad2fd8b7bbd35cf90e442b27a20e78a2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def serialize </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Serialize the graph in its grid form. </p>
<p>Deprecated. </p>

</div>
</div>
<a class="anchor" id="ac7bd6299e96593297a592d3045e337db"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">def _serialize </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>with_subgraphs</em> = <code>True</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Serialize the graph in its grid form. </p>
<p>Args: with_subgraphs (bool): Set to false to avoid infinite recursion </p>

</div>
</div>
<a class="anchor" id="a3ef3f528f3c6d2608a2cf2c414c145b1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">def from_pickle </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>De-serialize from the given pickle data. </p>

</div>
</div>
<a class="anchor" id="a65ed1d5a347be31615acc08d0646ca47"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">def from_json </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>De-serialize from the given json data. </p>

</div>
</div>
<a class="anchor" id="acc55513b8f622820fc330d57fdb67d57"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">def deserialize </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>De-serialize from the given json data. </p>

</div>
</div>
<a class="anchor" id="a6be30cce23167cece44175c826c70832"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">def _sort_node </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>level</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sort the node into the correct level. </p>

</div>
</div>
<a class="anchor" id="a1ca929624c0159704e01e879e1d620ba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def node_repr </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Format to visualize the <a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml" title="A graph of Nodes. ">Graph</a>. </p>

</div>
</div>
<a class="anchor" id="a28b6ada072c0782e74259ede825bf15c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def list_repr </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>List representation of the graph showing Nodes and connections. </p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="ab74e6bf80237ddc4109968cedc58c151"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">name</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a6da5270e48c8b5c2f0dbaa008af4df76"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">nodes</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="afde3b66b6b41bd008469f366fa756e54"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inputs</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="af8d743b78404b120589eca8c77c1c2a9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">outputs</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/travis/build/PaulSchweizer/flowpipe/flowpipe/graph.py</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d4/d3d/namespaceflowpipe.xhtml">flowpipe</a></li><li class="navelem"><a class="el" href="../../d0/d6b/namespaceflowpipe_1_1graph.xhtml">graph</a></li><li class="navelem"><a class="el" href="../../df/d88/classflowpipe_1_1graph_1_1Graph.xhtml">Graph</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
